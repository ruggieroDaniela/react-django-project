# Generated by Django 4.1.8 on 2023-05-11 00:57

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("username", models.CharField(max_length=128, null=True)),
                ("found_app_by", models.CharField(max_length=256)),
                (
                    "type_user",
                    models.CharField(
                        choices=[("natural", "Natural"), ("enterprise", "Enterprise")],
                        max_length=10,
                    ),
                ),
                ("country", models.CharField(max_length=128)),
                ("first_name", models.CharField(max_length=128, null=True)),
                ("last_name", models.CharField(max_length=128, null=True)),
                (
                    "dni",
                    models.CharField(
                        max_length=128,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="dni_invalido",
                                message="El campo debe ser una cédula de identidad o número de pasaporte",
                                regex="^(([A-Z]-)[0-9]{1,3}\\.?[0-9]{1,3}\\.?[0-9]{1,3})$|^([A-Z]{1,3}[0-9]{6,7})$",
                            )
                        ],
                    ),
                ),
                ("contact_email", models.EmailField(max_length=254, null=True)),
                ("cellphone", models.CharField(max_length=128, null=True)),
                ("telephone", models.CharField(max_length=128, null=True)),
                ("company_name", models.CharField(max_length=128, null=True)),
                ("rif", models.CharField(max_length=128, null=True)),
                ("city", models.CharField(max_length=128, null=True)),
                ("address", models.CharField(max_length=128, null=True)),
                ("representant_name", models.CharField(max_length=128, null=True)),
                ("representant_email", models.EmailField(max_length=254, null=True)),
                ("representant_cellphone", models.CharField(max_length=128, null=True)),
                ("representant_telephone", models.CharField(max_length=128, null=True)),
                (
                    "language",
                    models.CharField(
                        choices=[("es", "Spanish"), ("en", "English")], max_length=2
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("password", models.CharField(max_length=128)),
                ("want_inform", models.BooleanField()),
                ("frecuency_to_inform", models.CharField(max_length=128, null=True)),
                ("services_interest", models.JSONField(null=True)),
                ("email_to_inform", models.CharField(max_length=256, null=True)),
                ("social_media_to_inform", models.JSONField(null=True)),
                ("phone_to_inform", models.CharField(max_length=24, null=True)),
                ("other_to_inform", models.CharField(max_length=256, null=True)),
                ("facebook_to_inform", models.CharField(max_length=256, null=True)),
                ("bank_origin", models.CharField(max_length=128)),
                ("bank_country", models.CharField(max_length=128)),
                ("client_code", models.CharField(default="", max_length=50)),
                (
                    "date_joined",
                    models.JSONField(default=users.models.User.get_date_joined),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
